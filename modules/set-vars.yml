---
# Collect vpc cloudformation stack output
- name: Set variable
  set_fact:
    cfn_stack: "{{ cluster_name }}-{{ root_name }}-stack" 

- name: "modules/set-vars - Get {{ cfn_stack }} stack facts"
  amazon.aws.cloudformation_info:
    stack_name: "{{ cfn_stack }}" 
  register: stack_info

# - debug:
#     var: stack_info

- name: "modules/set-vars - {{ cluster_name }}-{{ vpc }}-stack"
  set_fact:
    PrivateSubnet1: "{{ stack_info.cloudformation[ cfn_stack ][ 'stack_outputs' ][ 'PrivateSubnet1' ] }}"
    PrivateSubnet2: "{{ stack_info.cloudformation[ cfn_stack ][ 'stack_outputs' ][ 'PrivateSubnet2' ] }}"
    PrivateSubnet3: "{{ stack_info.cloudformation[ cfn_stack ][ 'stack_outputs' ][ 'PrivateSubnet3' ] }}"
    PrivateSubnetIds: "{{ stack_info.cloudformation[ cfn_stack ][ 'stack_outputs' ][ 'PrivateSubnetIds' ] }}"
    PublicRouteTableId: "{{ stack_info.cloudformation[ cfn_stack ][ 'stack_outputs' ][ 'PublicRouteTableId' ] }}"
    PublicSubnet1: "{{ stack_info.cloudformation[ cfn_stack ][ 'stack_outputs' ][ 'PublicSubnet1' ] }}"
    PublicSubnet2: "{{ stack_info.cloudformation[ cfn_stack ][ 'stack_outputs' ][ 'PublicSubnet2' ] }}"
    PublicSubnet3: "{{ stack_info.cloudformation[ cfn_stack ][ 'stack_outputs' ][ 'PublicSubnet3' ] }}"
    PublicSubnetIds: "{{ stack_info.cloudformation[ cfn_stack ][ 'stack_outputs' ][ 'PublicSubnetIds' ] }}"
    VpcId: "{{ stack_info.cloudformation[ cfn_stack ][ 'stack_outputs' ][ 'VpcId' ] }}"
  when: root_name == vpc

- name: "modules/set-vars - {{ cluster_name }}-{{ lbs_dns }}-stack"
  set_fact:
    ApiServerDnsName:              "{{ stack_info.cloudformation[ cfn_stack ][ 'stack_outputs' ][ 'ApiServerDnsName' ] }}"
    ExternalApiLoadBalancerName:   "{{ stack_info.cloudformation[ cfn_stack ][ 'stack_outputs' ][ 'ExternalApiLoadBalancerName' ] }}"
    ExternalApiTargetGroupArn:     "{{ stack_info.cloudformation[ cfn_stack ][ 'stack_outputs' ][ 'ExternalApiTargetGroupArn' ] }}"
    ExtApiElbSecurityGroupId:      "{{ stack_info.cloudformation[ cfn_stack ][ 'stack_outputs' ][ 'ExtApiElbSecurityGroupId' ] }}"
    IntApiElbSecurityGroupId:      "{{ stack_info.cloudformation[ cfn_stack ][ 'stack_outputs' ][ 'IntApiElbSecurityGroupId' ] }}"
    InternalApiLoadBalancerName:   "{{ stack_info.cloudformation[ cfn_stack ][ 'stack_outputs' ][ 'InternalApiLoadBalancerName' ] }}"
    InternalApiTargetGroupArn:     "{{ stack_info.cloudformation[ cfn_stack ][ 'stack_outputs' ][ 'InternalApiTargetGroupArn' ] }}"
    InternalServiceTargetGroupArn: "{{ stack_info.cloudformation[ cfn_stack ][ 'stack_outputs' ][ 'InternalServiceTargetGroupArn' ] }}"
    PrivateHostedZoneId:           "{{ stack_info.cloudformation[ cfn_stack ][ 'stack_outputs' ][ 'PrivateHostedZoneId' ] }}"
    RegisterNlbIpTargetsLambda:    "{{ stack_info.cloudformation[ cfn_stack ][ 'stack_outputs' ][ 'RegisterNlbIpTargetsLambda' ] }}"
  when: root_name == lbs_dns

- name: "modules/set-vars - {{ cluster_name }}-{{ sec_grp }}-stack"
  set_fact:
    MasterInstanceProfile: "{{ stack_info.cloudformation[ cfn_stack ][ 'stack_outputs' ][ 'MasterInstanceProfile' ] }}"
    MasterSecurityGroupId: "{{ stack_info.cloudformation[ cfn_stack ][ 'stack_outputs' ][ 'MasterSecurityGroupId' ] }}"
    WorkerInstanceProfile: "{{ stack_info.cloudformation[ cfn_stack ][ 'stack_outputs' ][ 'WorkerInstanceProfile' ] }}"
    WorkerSecurityGroupId: "{{ stack_info.cloudformation[ cfn_stack ][ 'stack_outputs' ][ 'WorkerSecurityGroupId' ] }}"
  when: root_name == sec_grp
  
- name: "modules/set-vars - {{ cluster_name }}-{{ bootstrap }}-stack"
  set_fact:
    BootstrapInstanceId: "{{ stack_info.cloudformation[ cfn_stack ][ 'stack_outputs' ][ 'BootstrapInstanceId' ] }}"
    BootstrapPrivateIp: "{{ stack_info.cloudformation[ cfn_stack ][ 'stack_outputs' ][ 'BootstrapPrivateIp' ] }}"
    BootstrapPublicIp: "{{ stack_info.cloudformation[ cfn_stack ][ 'stack_outputs' ][ 'BootstrapPublicIp' ] }}"
  when: root_name == bootstrap

- name: "modules/set-vars d - Obtain the hosted zone ID for the Route 53 base domain"
  shell: "aws route53 list-hosted-zones-by-name --dns-name {{ base_domain }} --query 'HostedZones[0].Id' --output text | sed 's#/hostedzone/##'"
  register: hosted_zone_output

# - debug:
#     var: hosted_zone_output

- name: "modules/set-vars - {{ root_name }} - extract and view the infrastructure name from the Ignition config file metadata"
  command: jq -r .infraID {{ install_dir }}/metadata.json
  register: infra_name

# - debug:
#     var: infra_name

- name: "modules/set-vars - {{ root_name }} - set values"
  set_fact:
    InfrastructureName: "{{ infra_name['stdout'] }}"
    HostedZoneId: "{{ hosted_zone_output['stdout'] }}"